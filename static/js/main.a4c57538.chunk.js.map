{"version":3,"sources":["Components/About.js","Components/ProjectsMain.js","Components/Navigation.js","Components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["AboutContent","react_default","a","createElement","className","src","alt","href","role","aria-pressed","React","Component","ProjectsComponent","NavbarFeatures","BrowserRouter","id","NavLink","to","Route","exact","path","component","FooterPage","App","Navigation","Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAkBeA,mLAdP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,2BACAH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,wBAAwBC,IAAI,SAASF,UAAU,0BACxDH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAb,gDAA+EH,EAAAC,EAAAC,cAAA,WAA/E,wCAEAF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,uCACLH,UAAU,6BAA6BI,KAAK,SAASC,eAAa,QACjER,EAAAC,EAAAC,cAAA,KAAGC,UAAU,wBAFjB,yBARWM,IAAMC,WCQlBC,mLANP,OACIX,EAAAC,EAAAC,cAAA,mCAHoBO,IAAMC,WC6BvBE,mLAxBP,OACIZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,KACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BACzCd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kCACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAASZ,UAAU,WAAWa,GAAG,KAAjC,cAShBhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjCC,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWT,aAnB1BF,IAAMC,WCuBpBW,mLAxBP,OACIrB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,yCACLH,UAAU,yBACVI,KAAK,SAASC,eAAa,QAC1BR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAEjBH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,oDACLH,UAAU,yBACVI,KAAK,SAASC,eAAa,QAC1BR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAEjBH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,mCACLH,UAAU,yBACVI,KAAK,SAASC,eAAa,QAC1BR,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAlBZM,IAAMC,WCiBhBY,mLAVP,OACItB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqB,EAAD,MACAvB,EAAAC,EAAAC,cAACsB,EAAD,cALEd,aCGEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a4c57538.chunk.js","sourcesContent":["import React  from 'react';\n\nclass AboutContent extends React.Component {\n    render() {\n        return (\n            <div className=\"container-fluid text-center mx-6\">\n                <p className=\"h1-responsive mt-2\">Hello, my name is Ivan!</p>\n                <img src=\"./assets/my_photo.jpg\" alt=\"Avatar\" className=\"img-responsive avatar\"></img>\n                <p className=\"h2-responsive mt-2\">I'm a machine learning engineer from Moscow. <br/> I create models and data pipelines.\n                </p>\n                <a href=\"mailto:ivan.trusov.contact@gmail.com\"\n                   className=\"btn btn-outline-dark white\" role=\"button\" aria-pressed=\"true\">\n                    <i className=\"fa fa-envelope mr-1\"/> Contact me  </a>\n            </div>\n        );\n    }\n}\n\nexport default AboutContent;\n\n","import React from \"react\";\n\nclass ProjectsComponent extends React.Component {\n    render() {\n        return (\n            <div>projects here</div>\n        );\n    }\n}\n\nexport default ProjectsComponent;\n","import React  from 'react';\nimport { BrowserRouter as Router,Route,NavLink} from 'react-router-dom';\nimport AboutContent from './About';\nimport ProjectsComponent from './ProjectsMain';\n\nclass NavbarFeatures extends React.Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                            <ul className=\"navbar-nav mr-auto text-center\">\n                                <li className=\"nav-item\">\n                                    <NavLink className=\"nav-link\" to=\"/\"> About</NavLink>\n                                </li>\n                                {/*<li>*/}\n                                    {/*<NavLink to=\"/projects\"> Projects</NavLink>*/}\n                                {/*</li>*/}\n                            </ul>\n                        </div>\n                    </nav>\n\n                    <Route exact path=\"/\" component={AboutContent} />\n                    <Route path=\"/projects\" component={ProjectsComponent} />\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default NavbarFeatures;","import React from 'react';\n\nclass FooterPage extends React.Component {\n    render(){\n        return(\n            <footer className=\"footer fixed-bottom\">\n                <div className=\"container-fluid text-center bg-dark\">\n                    <a href=\"https://www.facebook.com/renardeinside\"\n                       className=\"btn text-white rbutton\"\n                       role=\"button\" aria-pressed=\"true\">\n                        <i className=\"fa fa-facebook\"/>\n                    </a>\n                    <a href=\"https://www.linkedin.com/in/ivan-trusov-37853679/\"\n                       className=\"btn text-white rbutton\"\n                       role=\"button\" aria-pressed=\"true\">\n                        <i className=\"fa fa-linkedin\"/>\n                    </a>\n                    <a href=\"https://github.com/renardeinside\"\n                       className=\"btn text-white rbutton\"\n                       role=\"button\" aria-pressed=\"true\">\n                        <i className=\"fa fa-github\"/>\n                    </a>\n                </div>\n            </footer>\n        );\n    }\n}\n\nexport default FooterPage;\n","import React, { Component } from 'react';\n\n// my components\nimport NavbarFeatures from './Components/Navigation';\nimport FooterPage from './Components/Footer';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <NavbarFeatures></NavbarFeatures>\n                <FooterPage></FooterPage>\n            </div>\n\n        )\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}